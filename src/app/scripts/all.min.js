(function(){angular.module("myApp",["ngRoute","myApp.view1","myApp.view2","myApp.version"]).config(["$routeProvider","$httpProvider",function(e,o){var n;return e.otherwise({redirectTo:"/view1"}),o.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded;charset=utf-8",n=function(e){var o,t,i,r,d,u,a,c;d="",r=void 0,c=void 0,o=void 0,u=void 0,a=void 0,i=void 0,t=void 0;for(r in e)if(c=e[r],c instanceof Array)for(t=0;t<c.length;)a=c[t],o=r+"["+t+"]",i={},i[o]=a,d+=n(i)+"&",++t;else if(c instanceof Object)for(u in c)a=c[u],o=r+"["+u+"]",i={},i[o]=a,d+=n(i)+"&";else void 0!==c&&null!==c&&(d+=encodeURIComponent(r)+"="+encodeURIComponent(c)+"&");return d.length?d.substr(0,d.length-1):d},o.defaults.transformRequest=[function(e){return angular.isObject(e)&&"[object File]"!==String(e)?n(e):e}]}])}).call(this);
(function(){var e,i,n,o,r;for(r=function(){},o=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],i=o.length,e=window.console=window.console||{};i--;)n=o[i],e[n]||(e[n]=r)}).call(this);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb2ZmZWUiLCJhcHAuanMiLCJjb21tb24uY29mZmVlIiwiY29tbW9uLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCJwYXJhbSIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJwb3N0Iiwib2JqIiwiZnVsbFN1Yk5hbWUiLCJpIiwiaW5uZXJPYmoiLCJuYW1lIiwicXVlcnkiLCJzdWJOYW1lIiwic3ViVmFsdWUiLCJ2YWx1ZSIsIkFycmF5IiwibGVuZ3RoIiwiT2JqZWN0IiwidW5kZWZpbmVkIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3Vic3RyIiwidHJhbnNmb3JtUmVxdWVzdCIsImRhdGEiLCJpc09iamVjdCIsIlN0cmluZyIsImNhbGwiLCJ0aGlzIiwiY29uc29sZSIsIm1ldGhvZCIsIm1ldGhvZHMiLCJub29wIiwid2luZG93Il0sIm1hcHBpbmdzIjoiQ0FBQSxXQUFBQSxRQUFRQyxPQUFPLFNBQ2IsVUFDQSxjQUNBLGNBQ0Esa0JBQ0NDLFFBQ0QsaUJBQWlCLGdCQUFnQixTQUFDQyxFQUFlQyxHQUMvQyxHQUFBQyxFQ2lERSxPRGpERkYsR0FBZUcsV0FBVUMsV0FBWSxXQUdyQ0gsRUFBY0ksU0FBU0MsUUFBUUMsS0FBSyxnQkFBa0Isa0RBTXRETCxFQUFRLFNBQUNNLEdBQ0wsR0FBQUMsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsQ0FBQUgsR0FBUSxHQUNSRCxFQUFPLE9BQ1BJLEVBQVEsT0FDUlAsRUFBYyxPQUNkSyxFQUFVLE9BQ1ZDLEVBQVcsT0FDWEosRUFBVyxPQUNYRCxFQUFJLE1BQ0osS0FBQUUsSUFBQUosR0FFSSxHQURBUSxFQUFRUixFQUFJSSxHQUNUSSxZQUFpQkMsT0FFaEIsSUFEQVAsRUFBSSxFQUNFQSxFQUFJTSxFQUFNRSxRQUNaSCxFQUFXQyxFQUFNTixHQUNqQkQsRUFBY0csRUFBTyxJQUFNRixFQUFJLElBQy9CQyxLQUNBQSxFQUFTRixHQUFlTSxFQUN4QkYsR0FBU1gsRUFBTVMsR0FBWSxNQUN6QkQsTUFDTCxJQUFHTSxZQUFpQkcsUUFDckIsSUFBQUwsSUFBQUUsR0FDSUQsRUFBV0MsRUFBTUYsR0FDakJMLEVBQWNHLEVBQU8sSUFBTUUsRUFBVSxJQUNyQ0gsS0FDQUEsRUFBU0YsR0FBZU0sRUFDeEJGLEdBQVNYLEVBQU1TLEdBQVksUUFDMkRTLFVBQVhKLEdBQXNDLE9BQVhBLElBQXpHSCxHQUFTUSxtQkFBbUJULEdBQVEsSUFBTVMsbUJBQW1CTCxHQUFTLElBQzlFLE9BQUdILEdBQU1LLE9BQVlMLEVBQU1TLE9BQU8sRUFBR1QsRUFBTUssT0FBUyxHQUFRTCxHQUVqRVosRUFBY0ksU0FBU2tCLGtCQUFvQixTQUFDQyxHQUN2QyxNQUFHM0IsU0FBUTRCLFNBQVNELElBQTRCLGtCQUFsQkUsT0FBT0YsR0FBZ0N0QixFQUFNc0IsR0FBV0EsU0NxQjVGRyxLQUFLQztDQ25FSixXQUFBLEdBQUFDLEdBQUFYLEVBQUFZLEVBQUFDLEVBQUFDLENBV0EsS0FYQUEsRUFBTyxhQUVQRCxHQUNJLFNBQVUsUUFBUyxRQUFTLFFBQVMsTUFBTyxTQUFVLFFBQ3RELFlBQWEsUUFBUyxpQkFBa0IsV0FBWSxPQUFRLE1BQzVELGVBQWdCLFVBQVcsYUFBYyxRQUFTLE9BQVEsVUFDMUQsV0FBWSxjQUFlLFlBQWEsUUFBUyxRQUVyRGIsRUFBU2EsRUFBUWIsT0FDakJXLEVBQVdJLE9BQU9KLFFBQVVJLE9BQU9KLFlBRTVCWCxLQUNIWSxFQUFTQyxFQUFRYixHQUdaVyxFQUFRQyxLQUNURCxFQUFRQyxHQUFVRSxLQ0MzQkwsS0FBS0MiLCJmaWxlIjoiYWxsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtcclxuICAnbmdSb3V0ZSdcclxuICAnbXlBcHAudmlldzEnXHJcbiAgJ215QXBwLnZpZXcyJ1xyXG4gICdteUFwcC52ZXJzaW9uJ1xyXG5dKS5jb25maWcgW1xyXG4gICckcm91dGVQcm92aWRlcicsJyRodHRwUHJvdmlkZXInLCgkcm91dGVQcm92aWRlciwkaHR0cFByb3ZpZGVyKSAtPlxyXG4gICAgJHJvdXRlUHJvdmlkZXIub3RoZXJ3aXNlIHJlZGlyZWN0VG86ICcvdmlldzEnXHJcbiAgICBcclxuICAgIFxyXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04XCJcclxuICAgICMjIypcclxuICAgIFRoZSB3b3JraG9yc2U7IGNvbnZlcnRzIGFuIG9iamVjdCB0byB4LXd3dy1mb3JtLXVybGVuY29kZWQgc2VyaWFsaXphdGlvbi5cclxuICAgIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICAgIEByZXR1cm4ge1N0cmluZ31cclxuICAgICMjI1xyXG4gICAgcGFyYW0gPSAob2JqKSAtPlxyXG4gICAgICAgIHF1ZXJ5ID0gXCJcIlxyXG4gICAgICAgIG5hbWUgPSB1bmRlZmluZWRcclxuICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZFxyXG4gICAgICAgIGZ1bGxTdWJOYW1lID0gdW5kZWZpbmVkXHJcbiAgICAgICAgc3ViTmFtZSA9IHVuZGVmaW5lZFxyXG4gICAgICAgIHN1YlZhbHVlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgaW5uZXJPYmogPSB1bmRlZmluZWRcclxuICAgICAgICBpID0gdW5kZWZpbmVkXHJcbiAgICAgICAgZm9yIG5hbWUgb2Ygb2JqXHJcbiAgICAgICAgICAgIHZhbHVlID0gb2JqW25hbWVdXHJcbiAgICAgICAgICAgIGlmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlcclxuICAgICAgICAgICAgICAgIGkgPSAwXHJcbiAgICAgICAgICAgICAgICB3aGlsZSBpIDwgdmFsdWUubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtpXVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxTdWJOYW1lID0gbmFtZSArIFwiW1wiICsgaSArIFwiXVwiXHJcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJPYmogPSB7fVxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyT2JqW2Z1bGxTdWJOYW1lXSA9IHN1YlZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkgKz0gcGFyYW0oaW5uZXJPYmopICsgXCImXCJcclxuICAgICAgICAgICAgICAgICAgICArK2lcclxuICAgICAgICAgICAgZWxzZSBpZiB2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdFxyXG4gICAgICAgICAgICAgICAgZm9yIHN1Yk5hbWUgb2YgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW3N1Yk5hbWVdXHJcbiAgICAgICAgICAgICAgICAgICAgZnVsbFN1Yk5hbWUgPSBuYW1lICsgXCJbXCIgKyBzdWJOYW1lICsgXCJdXCJcclxuICAgICAgICAgICAgICAgICAgICBpbm5lck9iaiA9IHt9XHJcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJPYmpbZnVsbFN1Yk5hbWVdID0gc3ViVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeSArPSBwYXJhbShpbm5lck9iaikgKyBcIiZcIlxyXG4gICAgICAgICAgICBlbHNlIHF1ZXJ5ICs9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSArIFwiJlwiICBpZiB2YWx1ZSBpc250IGB1bmRlZmluZWRgIGFuZCB2YWx1ZSBpc250IG51bGxcclxuICAgICAgICAoaWYgcXVlcnkubGVuZ3RoIHRoZW4gcXVlcnkuc3Vic3RyKDAsIHF1ZXJ5Lmxlbmd0aCAtIDEpIGVsc2UgcXVlcnkpXHJcbiAgICAjIE92ZXJyaWRlICRodHRwIHNlcnZpY2UncyBkZWZhdWx0IHRyYW5zZm9ybVJlcXVlc3RcclxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdCA9IFsoZGF0YSkgLT5cclxuICAgICAgICAoaWYgYW5ndWxhci5pc09iamVjdChkYXRhKSBhbmQgU3RyaW5nKGRhdGEpIGlzbnQgXCJbb2JqZWN0IEZpbGVdXCIgdGhlbiBwYXJhbShkYXRhKSBlbHNlIGRhdGEpXHJcbiAgICBdXHJcbl0iLCIoZnVuY3Rpb24oKSB7XG4gIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFsnbmdSb3V0ZScsICdteUFwcC52aWV3MScsICdteUFwcC52aWV3MicsICdteUFwcC52ZXJzaW9uJ10pLmNvbmZpZyhbXG4gICAgJyRyb3V0ZVByb3ZpZGVyJywgJyRodHRwUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGh0dHBQcm92aWRlcikge1xuICAgICAgdmFyIHBhcmFtO1xuICAgICAgJHJvdXRlUHJvdmlkZXIub3RoZXJ3aXNlKHtcbiAgICAgICAgcmVkaXJlY3RUbzogJy92aWV3MSdcbiAgICAgIH0pO1xuICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04XCI7XG5cbiAgICAgIC8qKlxuICAgICAgVGhlIHdvcmtob3JzZTsgY29udmVydHMgYW4gb2JqZWN0IHRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZCBzZXJpYWxpemF0aW9uLlxuICAgICAgQHBhcmFtIHtPYmplY3R9IG9ialxuICAgICAgQHJldHVybiB7U3RyaW5nfVxuICAgICAgICovXG4gICAgICBwYXJhbSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICB2YXIgZnVsbFN1Yk5hbWUsIGksIGlubmVyT2JqLCBuYW1lLCBxdWVyeSwgc3ViTmFtZSwgc3ViVmFsdWUsIHZhbHVlO1xuICAgICAgICBxdWVyeSA9IFwiXCI7XG4gICAgICAgIG5hbWUgPSB2b2lkIDA7XG4gICAgICAgIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICBmdWxsU3ViTmFtZSA9IHZvaWQgMDtcbiAgICAgICAgc3ViTmFtZSA9IHZvaWQgMDtcbiAgICAgICAgc3ViVmFsdWUgPSB2b2lkIDA7XG4gICAgICAgIGlubmVyT2JqID0gdm9pZCAwO1xuICAgICAgICBpID0gdm9pZCAwO1xuICAgICAgICBmb3IgKG5hbWUgaW4gb2JqKSB7XG4gICAgICAgICAgdmFsdWUgPSBvYmpbbmFtZV07XG4gICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtpXTtcbiAgICAgICAgICAgICAgZnVsbFN1Yk5hbWUgPSBuYW1lICsgXCJbXCIgKyBpICsgXCJdXCI7XG4gICAgICAgICAgICAgIGlubmVyT2JqID0ge307XG4gICAgICAgICAgICAgIGlubmVyT2JqW2Z1bGxTdWJOYW1lXSA9IHN1YlZhbHVlO1xuICAgICAgICAgICAgICBxdWVyeSArPSBwYXJhbShpbm5lck9iaikgKyBcIiZcIjtcbiAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgIGZvciAoc3ViTmFtZSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW3N1Yk5hbWVdO1xuICAgICAgICAgICAgICBmdWxsU3ViTmFtZSA9IG5hbWUgKyBcIltcIiArIHN1Yk5hbWUgKyBcIl1cIjtcbiAgICAgICAgICAgICAgaW5uZXJPYmogPSB7fTtcbiAgICAgICAgICAgICAgaW5uZXJPYmpbZnVsbFN1Yk5hbWVdID0gc3ViVmFsdWU7XG4gICAgICAgICAgICAgIHF1ZXJ5ICs9IHBhcmFtKGlubmVyT2JqKSArIFwiJlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBxdWVyeSArPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgKyBcIiZcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBxdWVyeS5zdWJzdHIoMCwgcXVlcnkubGVuZ3RoIC0gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuICRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdCA9IFtcbiAgICAgICAgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KGRhdGEpICYmIFN0cmluZyhkYXRhKSAhPT0gXCJbb2JqZWN0IEZpbGVdXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbShkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH1cbiAgXSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIjIEF2b2lkIGBjb25zb2xlYCBlcnJvcnMgaW4gYnJvd3NlcnMgdGhhdCBsYWNrIGEgY29uc29sZS5cbiAgICBub29wID0gKCkgLT5cclxuICAgIFxuICAgIG1ldGhvZHMgPSBbXG4gICAgICAgICdhc3NlcnQnLCAnY2xlYXInLCAnY291bnQnLCAnZGVidWcnLCAnZGlyJywgJ2RpcnhtbCcsICdlcnJvcicsXG4gICAgICAgICdleGNlcHRpb24nLCAnZ3JvdXAnLCAnZ3JvdXBDb2xsYXBzZWQnLCAnZ3JvdXBFbmQnLCAnaW5mbycsICdsb2cnLFxuICAgICAgICAnbWFya1RpbWVsaW5lJywgJ3Byb2ZpbGUnLCAncHJvZmlsZUVuZCcsICd0YWJsZScsICd0aW1lJywgJ3RpbWVFbmQnLFxuICAgICAgICAndGltZWxpbmUnLCAndGltZWxpbmVFbmQnLCAndGltZVN0YW1wJywgJ3RyYWNlJywgJ3dhcm4nXG4gICAgXVxuICAgIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoXG4gICAgY29uc29sZSA9ICh3aW5kb3cuY29uc29sZSA9IHdpbmRvdy5jb25zb2xlIHx8IHt9KVxuXG4gICAgd2hpbGUgKGxlbmd0aC0tKVxuICAgICAgICBtZXRob2QgPSBtZXRob2RzW2xlbmd0aF1cblxuICAgICAgICAjIE9ubHkgc3R1YiB1bmRlZmluZWQgbWV0aG9kcy5cbiAgICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pXG4gICAgICAgICAgICBjb25zb2xlW21ldGhvZF0gPSBub29wIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgY29uc29sZSwgbGVuZ3RoLCBtZXRob2QsIG1ldGhvZHMsIG5vb3A7XG5cbiAgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cbiAgbWV0aG9kcyA9IFsnYXNzZXJ0JywgJ2NsZWFyJywgJ2NvdW50JywgJ2RlYnVnJywgJ2RpcicsICdkaXJ4bWwnLCAnZXJyb3InLCAnZXhjZXB0aW9uJywgJ2dyb3VwJywgJ2dyb3VwQ29sbGFwc2VkJywgJ2dyb3VwRW5kJywgJ2luZm8nLCAnbG9nJywgJ21hcmtUaW1lbGluZScsICdwcm9maWxlJywgJ3Byb2ZpbGVFbmQnLCAndGFibGUnLCAndGltZScsICd0aW1lRW5kJywgJ3RpbWVsaW5lJywgJ3RpbWVsaW5lRW5kJywgJ3RpbWVTdGFtcCcsICd0cmFjZScsICd3YXJuJ107XG5cbiAgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7XG5cbiAgY29uc29sZSA9ICh3aW5kb3cuY29uc29sZSA9IHdpbmRvdy5jb25zb2xlIHx8IHt9KTtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBtZXRob2QgPSBtZXRob2RzW2xlbmd0aF07XG4gICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcbiAgICAgIGNvbnNvbGVbbWV0aG9kXSA9IG5vb3A7XG4gICAgfVxuICB9XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
